#!/bin/bash

# REQUIREMENTS:
#   * git
#   * pip
#   * easy_install
#   * virtualenvwrapper
#   * heroku toolbelt
#   * 'heroku login' complete
#   * your heroku account verified (with a CC#)
# the script will exit ungracefully without any one of these
# tested and working on OSX 10.8 

PROJECTNAME=$1

echo -e "\x1B[1;31m>>>> Setting up a virtual environment... \x1B[0m"
mkvirtualenv $PROJECTNAME
workon $PROJECTNAME
add2virtualenv 'pwd'

echo -e "\x1B[1;31m>>>> Installing the latest Django... \x1B[0m"
pip install django

#start the project using my django skeleton
echo -e "\x1B[1;31m>>>> Creating a project from the skeleton... \x1B[0m"
django-admin.py startproject --template=https://github.com/bjacobel/django-skel/zipball/master $PROJECTNAME

#install all the requirements of that skeleton (there are a lot)
cd $PROJECTNAME
echo -e "\x1B[1;31m>>>> Installing requirements...\x1B[0m"
pip install -r reqs/dev.txt

chmod u+x ./manage.py

echo -e "\x1B[1;31m>>>> Setting up your database... \x1B[0m"
echo -e "\x1B[1;31m>>>> You'll need to provide a username/password for an admin account. \x1B[0m"
./manage.py syncdb
./manage.py migrate

rm README.md && touch README.md
README=$PROJECTNAME"\n=========\nA Django project automagically set up from my [skeleton project](https://github.com/bjacobel/django-skel)."
echo -e $README > README.md

mkdir $PROJECTNAME/assets
mkdir $PROJECTNAME/assets/{css,js,img}

echo -e "\x1B[1;31m>>>> Version controlling with Git... \x1B[0m"
git init
git add .
git commit -m "Auto-setup of project skeleton using bjacobel/django-skel"

echo -e "\x1B[1;31m>>>> Prepping Heroku production environment... \x1B[0m"
heroku create $PROJECTNAME
heroku addons:add heroku-postgresql:dev 
heroku addons:add mailgun:starter
heroku addons:add memcachier:developer
heroku addons:add newrelic:wayne
heroku addons:add pgbackups:auto-month
heroku addons:add papertrail:choklad
heroku addons:add rabbitmq-bigwig:pipkin

echo -e "\x1B[1;31m>>>> Pushing to Heroku and installing requirements...\x1B[0m"
git push heroku master
heroku pg:info
echo -e "\x1B[1;31m>>>> Type in the name of the database Heroku created above: \x1B[0m"
read -p "Database name?: " db
echo
heroku pg:promote $db
heroku config:add DJANGO_SETTINGS_MODULE=$PROJECTNAME.settings.prod
#technically pseudorandom, but damn near random enough
SECRETKEY=`cat /dev/urandom|LANG=C tr -dc "a-zA-Z0-9-_\$\?"|fold -w 40|head -1`
heroku config:add SECRET_KEY=$SECRETKEY
heroku config:add AWS_STORAGE_BUCKET_NAME=$PROJECTNAME

echo -e "\x1B[1;31m>>>> Do you want to create a NEW GitHub repo for this project?: \x1B[0m"
read -n1 -p "[y|n]: " yn
echo

if [ "$yn" == "y" ]; then
    echo -e "\x1B[1;31m>>>> Creating repo, adding remote, and pushing to GitHub... \x1B[0m"
    curl -u 'bjacobel' https://api.github.com/user/repos -d '{"name":"'$PROJECTNAME'"}' > /dev/null
    git remote add origin git@github.com:bjacobel/$PROJECTNAME.git
    git push -f origin master
else
    echo -e "\x1B[1;31m>>>> Does that mean you already have a Github repo?: \x1B[0m"
    read -n1 -p "[y|n]: " yn
    echo

    if [ "$yn" == "y" ]; then
        echo -e "\x1B[1;31m>>>> What's it named?: \x1B[0m"
        read -p "Name: " repo
        git remote add origin git@github.com:bjacobel/$repo.git
        git push -f origin master
    fi
fi




exitmessage="\x1B[1;31m>>>> All done! \nTo test locally:\tworkon "$PROJECTNAME"\n\t\t\t./manage.py runserver \nTo run on Heroku:\theroku ps:scale web=1\n\t\t\theroku open\nTo add S3 storage:\theroku config:add AWS_ACCESS_KEY_ID=xxx\n\t\theroku config:add AWS_SECRET_ACCESS_KEY=xxx\n\t\theroku run collectstatic -c --noinput\n\t\theroku run compress\n\x1B[0m"
echo -e $exitmessage